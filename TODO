New features:
- add an option for players to set delay between opening tabs (at least 250 ms)
- catas remaining
- multiple arrival times
- show number of targets/ how many fakes generated of the input coords
- workbench export?
- notes export?
- max number of fakes from own villages
- remove coordinates of own tribe from the coord list
- make coord input a button (more calcs possible)
- save coords in local storage
- save local storage in one object
- let players save multiple coord presets
-- Object:
- chosen_group (number)
- attack_per_button  (number)
- delay (number)
- unit_selection_type (string)
- max_atttacks_per_village (number)
- send_spy (string)
- keep_catapults (number)
- units_to_send (object made out of multiple "string to number" pairings)
- units_to_keep (object made out of multiple "string to number" pairings)
- arrival_times (array of arrays)
- target_coordinates (array of strings)

- dynamic/manuell unit input
- fix copied bug in fetchTroopsForCurrentGroup
- script usage counter?

Things i have to change to UI for:
- dynamic/manuell unit input
- add an option for players to set delay between opening tabs (at least 250 ms)
- catas remaining
- multiple arrival times
- show number of targets/ how many fakes generated of the input coords
- workbench export?
- notes export?
- max number of fakes from own villages
- make coord input a button (more calcs possible)


Notes on SDK:
- maybe add ra-text-center to global styles (used in buildUnitsPicker)






                let array = [];
                // REMOVE IN LIVE
                if (DEBUG) {
                    // Moved outside to only be generated once, records all used villageIds
                    for (i = 0; i < 99; i++) {
                        array.push(generateRandomVillageObject());
                    }
                    calculateFakes(array, targetCoords, worldConfig.config.night, parseInt(worldConfig.config.game.fake_limit), parseFloat(worldUnitInfo.config.catapult.speed), spySend);

                } else {
                    calculateFakes(playerVillages, targetCoords, worldConfig.config.night, parseInt(worldConfig.config.game.fake_limit), parseFloat(worldUnitInfo.config.catapult.speed), spySend);

                }

        // REMOVE IN LIVE
        let usedVillageIds = new Set();

        // REMOVE IN LIVE
        // Helper function to generate random integer between min (inclusive) and max (exclusive)
        function getRandomInt(min, max) {
            min = Math.ceil(min);
            max = Math.floor(max);
            return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
        }

        // REMOVE IN LIVE VERSION
        function generateRandomVillageObject() {
            // Generate a random coordinate string 'xxx|yyy'
            const coord = `${getRandomInt(100, 130).toString().padStart(3, '0')}|${getRandomInt(100, 130).toString().padStart(3, '0')}`;

            let villageId;

            // Ensure villageId is unique by generating new ones until we find one that hasn't been used
            do {
                villageId = getRandomInt(1, 2001);
            } while (usedVillageIds.has(villageId));

            // Record the used villageId
            usedVillageIds.add(villageId);

            return {
                archer: getRandomInt(0, 201),
                axe: getRandomInt(0, 201),
                catapult: getRandomInt(150, 160),
                coord: coord,
                heavy: getRandomInt(0, 201),
                knight: getRandomInt(0, 201),
                light: getRandomInt(0, 201),
                marcher: getRandomInt(0, 201),
                militia: getRandomInt(0, 201),
                ram: getRandomInt(0, 201),
                points: getRandomInt(8000, 9000),
                snob: getRandomInt(0, 201),
                spear: getRandomInt(0, 201),
                spy: getRandomInt(0, 201),
                sword: getRandomInt(0, 201),
                villageId: villageId
            };
        }












        
            // First row with unit images
            unitTable += '<tr>';
            for (const unit of units) {
                unitTable += `<th class="sb-td-image"><img src="/graphic/unit/unit_${unit}.png" alt="${unit}"></th>`;
            }
            unitTable += '</tr>';

            // Second row with number inputs
            unitTable += '<tr>';
            for (const unit of units) {
                unitTable += `<td><input type="number" class="sb-unit-input" id="input_${unit}" value="0"></td>`;
            }
            unitTable += '</tr>';

            unitTable += '</table>';




                        jQuery('#addTimeEntry').on('click', async function (e) {
                e.preventDefault();
                //TODO Logic to add new entry into the fieldset with the id arrivalTimeFieldset
                // After clicking we check the following: 
                // - both times need to be selected
                // - Both selected times need to be after the current time (ids for the inputs are startDateTime and endDateTime)
                // - start time needs to be before endtime
                // Then we call the function getLocalStorage()
                // the function returns an object and object.arrival_times will contain an array with all arrival times
                // append the new arrival time as an array [start, end] to the array object.arrival_times
                // then call the function saveLocalStorage(object) and give the changed object as the parameter
                // now we finally create a new  <div class="sb-grid sb-grid-5"> 
                // div 1 and 2 will contain the start and end time in textform
                // div 3 will be a "X" button used to delete this entry
                // include a function that handles the X button click
                // it should remove the <div class="sb-grid sb-grid-5"> from the  arrivalTimeFieldset and call  getLocalStorage() and saveLocalStorage(object) while removing the deleted arrival timespan
                // div 4 and 5 in the grid will be empty
            });